-- Bloxscript with Teleport, Aimbot, ESP, Noclip, Speed, Jump, Auto, and more
-- Designed for Roblox executors like Krnl
-- Please execute after game fully loads

local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/orion.lua"))()

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")

local Player = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Variables for features
local speedhack = false
local speed = 16
local speedConn = nil

local jumpHack = false
local jumpPower = 50
local jumpConn = nil

local infiniteJump = false

local noclip = false
local noclipConn = nil

local infiniteHealth = false
local healthConn = nil

local aimbot = false
local aimPart = "Head"

local espEnabled = false

local autoWalk = false
local autoWalkConn = nil

local autoJump = false
local autoJumpConn = nil

local autoRespawn = false
local autoRespawnConn = nil

-- Create window
local Window = OrionLib:MakeWindow({Name = "Bloxscript", HidePremium = false, SaveConfig = true, ConfigFolder = "Bloxscript"})

local MainTab = Window:MakeTab({Name = "Main", Icon = "rbxassetid://4483345998"})
local CombatTab = Window:MakeTab({Name = "Combat", Icon = "rbxassetid://4483345998"})
local AutoTab = Window:MakeTab({Name = "Auto", Icon = "rbxassetid://4483345998"})
local TeleportTab = Window:MakeTab({Name = "Teleport", Icon = "rbxassetid://4483345998"})
local SettingsTab = Window:MakeTab({Name = "Settings", Icon = "rbxassetid://4483345998"})

-- Main tab controls

MainTab:AddToggle({ 
    Name = "Speed Hack", 
    Default = false, 
    Save = true, 
    Flag = "speedhack_toggle", 
    Callback = function(Value)
        speedhack = Value
        if speedhack then
            speedConn = RunService.RenderStepped:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.WalkSpeed = speed
                end
            end)
        else
            if speedConn then speedConn:Disconnect() speedConn = nil end
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid.WalkSpeed = 16
            end
        end
    end
})

MainTab:AddSlider({ 
    Name = "Speed Slider", 
    Min = 16, 
    Max = 500, 
    Default = 16, 
    Color = Color3.fromRGB(85, 170, 255), 
    Increment = 1, 
    Save = true, 
    Flag = "speedhack_slider", 
    Callback = function(Value)
        speed = Value
        if speedhack and Player.Character and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.WalkSpeed = speed
        end
    end
})

MainTab:AddToggle({ 
    Name = "Jump Power Hack", 
    Default = false, 
    Save = true, 
    Flag = "jumphack_toggle", 
    Callback = function(Value)
        jumpHack = Value
        if jumpHack then
            jumpConn = RunService.RenderStepped:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.JumpPower = jumpPower
                end
            end)
        else
            if jumpConn then jumpConn:Disconnect() jumpConn = nil end
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid.JumpPower = 50
            end
        end
    end
})

MainTab:AddSlider({ 
    Name = "Jump Power Slider", 
    Min = 50, 
    Max = 500, 
    Default = 50, 
    Color = Color3.fromRGB(85, 170, 255), 
    Increment = 5, 
    Save = true, 
    Flag = "jumphack_slider", 
    Callback = function(Value)
        jumpPower = Value
        if jumpHack and Player.Character and Player.Character:FindFirstChild("Humanoid") then
            Player.Character.Humanoid.JumpPower = jumpPower
        end
    end
})

MainTab:AddToggle({ 
    Name = "Infinite Jump", 
    Default = false, 
    Save = true, 
    Flag = "infiniteJump_toggle", 
    Callback = function(Value)
        infiniteJump = Value
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJump and Player.Character and Player.Character:FindFirstChild("Humanoid") then
        Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Combat (Fighting) tab controls

FightingTab:AddToggle({ 
    Name = "Aimbot", 
    Default = false, 
    Save = true, 
    Flag = "aimbot_toggle", 
    Callback = function(Value)
        aimbot = Value
    end
})

FightingTab:AddDropdown({ 
    Name = "Aimbot Target Part", 
    Default = "Head", 
    Save = true, 
    Flag = "aimbot_part", 
    Options = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"}, 
    Callback = function(Value)
        aimPart = Value
    end
})

local function getClosestPlayer()
    local closest = nil
    local dist = math.huge
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= Player and plr.Character and plr.Character:FindFirstChild(aimPart) then
            local pos = plr.Character[aimPart].Position
            local d = (camera.CFrame.Position - pos).Magnitude
            if d < dist then
                dist = d
                closest = plr
            end
        end
    end
    return closest
end

local aimConn = RunService.RenderStepped:Connect(function()
    if aimbot then
        local nearest = getClosestPlayer()
        if nearest and nearest.Character and nearest.Character:FindFirstChild(aimPart) then
            local aimTarget = nearest.Character[aimPart].Position
            camera.CFrame = CFrame.new(camera.CFrame.Position, aimTarget)
        end
    end
end)


FightingTab:AddToggle({ 
    Name = "ESP", 
    Default = false, 
    Save = true, 
    Flag = "esp_toggle", 
    Callback = function(Value)
        espEnabled = Value
        if espEnabled then
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= Player and plr.Character then
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = plr.Character
                end
                plr.CharacterAdded:Connect(function(chr)
                    if espEnabled then
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = chr
                    end
                end)
            end
            Players.PlayerAdded:Connect(function(plr)
                if espEnabled then
                    plr.CharacterAdded:Connect(function(chr)
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = chr
                    end)
                end
            end)
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr.Character then
                    for _, child in pairs(plr.Character:GetChildren()) do
                        if child:IsA("Highlight") then
                            child:Destroy()
                        end
                    end
                end
            end
        end
    end
})

-- Auto tab controls

AutoTab:AddToggle({ 
    Name = "Auto Walk", 
    Default = false, 
    Save = true, 
    Flag = "auto_walk_toggle", 
    Callback = function(Value)
        autoWalk = Value
        if autoWalk then
            autoWalkConn = RunService.RenderStepped:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                    local root = Player.Character.HumanoidRootPart
                    root.CFrame = root.CFrame * CFrame.new(0, 0, -0.5)
                end
            end)
        else
            if autoWalkConn then autoWalkConn:Disconnect() autoWalkConn = nil end
        end
    end
})

AutoTab:AddToggle({ 
    Name = "Auto Jump", 
    Default = false, 
    Save = true, 
    Flag = "auto_jump_toggle", 
    Callback = function(Value)
        autoJump = Value
        if autoJump then
            autoJumpConn = RunService.RenderStepped:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    local humanoid = Player.Character.Humanoid
                    if humanoid:GetState() == Enum.HumanoidStateType.Running or
                       humanoid:GetState() == Enum.HumanoidStateType.RunningNoPhysics then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        else
            if autoJumpConn then autoJumpConn:Disconnect() autoJumpConn = nil end
        end
    end
})

AutoTab:AddToggle({ 
    Name = "Auto Respawn (Auto Dies)", 
    Default = false, 
    Save = true, 
    Flag = "auto_respawn_toggle", 
    Callback = function(Value)
        autoRespawn = Value
        if autoRespawn then
            autoRespawnConn = RunService.RenderStepped:Connect(function()
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.Health = 0
                end
            end)
        else
            if autoRespawnConn then autoRespawnConn:Disconnect() autoRespawnConn = nil end
        end
    end
})

-- Teleport tab controls

local playerList = {}
for _, plr in pairs(Players:GetPlayers()) do
    table.insert(playerList, plr.Name)
end

local selectedPlayer = nil

TeleportTab:AddDropdown({ 
    Name = "Select Player", 
    Default = playerList[1] or "None", 
    Options = playerList, 
    Flag = "teleport_player_dropdown", 
    Callback = function(Value)
        selectedPlayer = Value
    end
})

TeleportTab:AddButton({ 
    Name = "Teleport To Player", 
    Callback = function()
        if selectedPlayer then
            local targetPlayer = Players:FindFirstChild(selectedPlayer)
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                Player.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            else
                print("Player or character not found.")
            end
        else
            print("No player selected.")
        end
    end
})

-- Update the player list when someone joins or leaves
Players.PlayerAdded:Connect(function(plr)
    table.insert(playerList, plr.Name)
    TeleportTab:RefreshDropdown("teleport_player_dropdown", playerList)
end)

Players.PlayerRemoving:Connect(function(plr)
    for i, name in ipairs(playerList) do
        if name == plr.Name then
            table.remove(playerList, i)
            break
        end
    end
    TeleportTab:RefreshDropdown("teleport_player_dropdown", playerList)
end)

-- Settings Tab: GUI Theme Customization --

local themeColors = {
    Accent = Color3.fromRGB(0, 170, 255),
    Background = Color3.fromRGB(25, 25, 25),
    DarkContrast = Color3.fromRGB(20, 20, 20),
    LightContrast = Color3.fromRGB(35, 35, 35),
    TextColor = Color3.fromRGB(255, 255, 255),
}

SettingsTab:AddColorPicker({
    Name = "Accent Color",
    Default = themeColors.Accent,
    Flag = "accent_color",
    Callback = function(Color)
        themeColors.Accent = Color
        Window:SetTheme(themeColors)
    end
})

SettingsTab:AddColorPicker({
    Name = "Background Color",
    Default = themeColors.Background,
    Flag = "background_color",
    Callback = function(Color)
        themeColors.Background = Color
        Window:SetTheme(themeColors)
    end
})

SettingsTab:AddColorPicker({
    Name = "Dark Contrast",
    Default = themeColors.DarkContrast,
    Flag = "dark_contrast_color",
    Callback = function(Color)
        themeColors.DarkContrast = Color
        Window:SetTheme(themeColors)
    end
})

SettingsTab:AddColorPicker({
    Name = "Light Contrast",
    Default = themeColors.LightContrast,
    Flag = "light_contrast_color",
    Callback = function(Color)
        themeColors.LightContrast = Color
        Window:SetTheme(themeColors)
    end
})

SettingsTab:AddColorPicker({
    Name = "Text Color",
    Default = themeColors.TextColor,
    Flag = "text_color",
    Callback = function(Color)
        themeColors.TextColor = Color
        Window:SetTheme(themeColors)
    end
})

-- Initialize Orion
OrionLib:Init()
print("Bloxscript loaded successfully.")
